{"version":3,"sources":["app.js","controllers/adminCtrl.js","controllers/mainCtrl.js","directives/adminCrudDir.js","services/authService.js","services/materialSrv.js","services/sizeSrv.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","templateUrl","url","controller","$scope","materialSrv","sizeSrv","$interval","adminCtrlTest","materialSrvTest","sizeSrvTest","materialInfo","sectionTitle","createTitle","formID","inputField","id","placeholder","methods","create","type","cb","createNewMat","clearForm","document","getElementById","reset","focus","getList","getAllMats","then","listData","response","delete","deleteMat","existingTitle","optionPlaceholder","sizesInfo","authService","mainCtrlTest","authServiceTest","String","prototype","makeUpperCase","uc","str","toLowerCase","split","map","wordSplit","e","tuc","splice","charAt","toUpperCase","join","logout","console","log","directive","scope","dirData","service","$http","get","window","location","href","messageResponse","data","unique","matList","forEach","alert","method","sort","a","b","typeA","typeB"],"mappings":";;AAAAA,QAAQC,MAAR,CAAe,KAAf,EAAsB,CAAC,WAAD,CAAtB,EACKC,MADL,CACY,UAACC,cAAD,EAAiBC,kBAAjB,EAAwC;AAC5CA,uBAAmBC,SAAnB,CAA6B,GAA7B,EAAkC,EAAlC;AACAF,mBACCG,KADD,CACO,MADP,EACe;AACXC,qBAAa,uBADF;AAETC,aAAK;AAFI,KADf,EAKCF,KALD,CAKO,QALP,EAKiB;AACbC,qBAAa,sBADA;AAEXC,aAAK;AAFM,KALjB,EASCF,KATD,CASO,QATP,EASiB;AACbC,qBAAa,4BADA;AAEXC,aAAK;AAFM,KATjB,EAaCF,KAbD,CAaO,MAbP,EAae;AACXC,qBAAa,oBADF;AAETC,aAAK;AAFI,KAbf,EAiBCF,KAjBD,CAiBO,UAjBP,EAiBmB;AACfC,qBAAa,wBADE;AAEbC,aAAK;AAFQ,KAjBnB,EAqBCF,KArBD,CAqBO,cArBP,EAqBuB;AACnBC,qBAAa,4BADM;AAEjBC,aAAK;AAFY,KArBvB,EAyBCF,KAzBD,CAyBO,OAzBP,EAyBgB;AACZC,qBAAa,qBADD;AAEVC,aAAK,QAFK;AAGVC,oBAAY;AAHF,KAzBhB;AA8BH,CAjCL;;;ACAAT,QAAQC,MAAR,CAAe,KAAf,EAAsBQ,UAAtB,CAAiC,WAAjC,EAA8C,UAAUC,MAAV,EAAkBC,WAAlB,EAA+BC,OAA/B,EAAwCC,SAAxC,EAAmD;AAC7F;AACA;AACA;AACAH,WAAOI,aAAP,GAAuB,mDAAvB;AACAJ,WAAOK,eAAP,GAAyBJ,YAAYI,eAArC;AACA;AACAL,WAAOM,WAAP,GAAqBJ,QAAQI,WAA7B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACAN,WAAOO,YAAP,GAAsB;AAClBC,sBAAc,WADI;AAEhBC,qBAAa,qBAFG;AAGhBC,gBAAQ,uBAHQ;AAIhBC,oBAAY;AACVC,gBAAI,UADM;AAERC,yBAAa;AAFL,SAJI;AAQhBC,iBAAS;AACPC,oBAAQ,gBAACC,IAAD,EAAOC,EAAP,EAAc;AAClBhB,4BAAYiB,YAAZ,CAAyBF,IAAzB,GAAgCC,GAAGD,IAAH,CAAhC;AACH,aAHM;AAILG,uBAAW,yBAAQ;AACjBC,yBAASC,cAAT,CAAwBrB,OAAOO,YAAP,CAAoBG,MAA5C,EAAoDY,KAApD;AACAF,yBAASC,cAAT,CAAwBrB,OAAOO,YAAP,CAAoBI,UAApB,CAA+BC,EAAvD,EAA2DW,KAA3D;AACApB,0BAAU,aAAK;AACXH,2BAAOO,YAAP,CAAoBO,OAApB,CAA4BU,OAA5B;AACH,iBAFD,EAEG,GAFH,EAEQ,CAFR;AAGH,aAVM;AAWLA,qBAAS;AAAA,uBAAKvB,YAAYwB,UAAZ,GAAyBC,IAAzB,CAA8B;AAAA,2BAAY1B,OAAOO,YAAP,CAAoBoB,QAApB,GAA+BC,QAA3C;AAAA,iBAA9B,CAAL;AAAA,aAXJ;AAYLC,oBAAQ;AAAA,uBAAM5B,YAAY6B,SAAZ,CAAsBlB,EAAtB,EAA0BZ,OAAOO,YAAP,CAAoBO,OAApB,CAA4BU,OAAtD,CAAN;AAAA;AAZH,SARO;AAsBhBO,uBAAe,oBAtBC;AAuBhBC,2BAAmB;AAvBH,KAAtB;AAyBAhC,WAAOO,YAAP,CAAoBO,OAApB,CAA4BU,OAA5B;;AAEA;AACAxB,WAAOiC,SAAP,GAAmB;AACfzB,sBAAc,OADC;AAEbC,qBAAa,iBAFA;AAGbC,gBAAQ,kBAHK;AAIbC,oBAAY;AACVC,gBAAI,WADM;AAERC,yBAAa;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBc,SAJC,EAsBbkB,eAAe,gBAtBF;AAuBbC,2BAAmB;AAEzB;AAzBmB,KAAnB;AA0BH,CAvED;;;ACAA1C,QAAQC,MAAR,CAAe,KAAf,EAAsBQ,UAAtB,CAAiC,UAAjC,EAA6C,UAAUC,MAAV,EAAkBkC,WAAlB,EAA+B;AACxE;AACA;AACA;AACAlC,WAAOmC,YAAP,GAAsB,kDAAtB;AACAnC,WAAOoC,eAAP,GAAyBF,YAAYE,eAArC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACAC,WAAOC,SAAP,CAAiBC,aAAjB,GAAiC,eAAO;AACpC,YAAIC,KAAKC,IAAIC,WAAJ,GAAkBC,KAAlB,CAAwB,GAAxB,EAA6BC,GAA7B,CAAiC,aAAK;AAC3C,gBAAIC,YAAYC,EAAEH,KAAF,CAAQ,EAAR,CAAhB;AAAA,gBAA6BI,MAAMF,UAAUG,MAAV,CAAiB,CAAjB,EAAoB,CAApB,EAAuBF,EAAEG,MAAF,CAAS,CAAT,EAAYC,WAAZ,EAAvB,CAAnC;AACA,mBAAOL,UAAUM,IAAV,CAAe,EAAf,CAAP;AACH,SAHQ,CAAT;AAIA,eAAOX,GAAGW,IAAH,CAAQ,GAAR,CAAP;AACH,KAND;;AAQA;AACA;AACA;AACAnD,WAAOoD,MAAP,GAAgB,aAAK;AACjBC,gBAAQC,GAAR;AACApB,oBAAYkB,MAAZ;AACH,KAHD;AAKH,CA9BD;;;ACAA9D,QAAQC,MAAR,CAAe,KAAf,EAAsBgE,SAAtB,CAAgC,cAAhC,EAAgD,YAAY;AACxD,WAAO;AACHC,eAAO;AACHC,qBAAS;AADN,SADJ;AAID5D,qBAAa;AAJZ,KAAP;AAMH,CAPD;;;ACAAP,QAAQC,MAAR,CAAe,KAAf,EAAsBmE,OAAtB,CAA8B,aAA9B,EAA6C,UAAUC,KAAV,EAAiB;AAC9D;AACA;AACA;AACI,SAAKvB,eAAL,GAAuB,8BAAvB;;AAEJ;AACA;AACA;AACI,SAAKgB,MAAL,GAAc;AAAA,eAAMO,MAAMC,GAAN,CAAU,kBAAV,EAA8BlC,IAA9B,CAAmC;AAAA,mBAAYmC,OAAOC,QAAP,CAAgBC,IAAhB,GAAuB,GAAnC;AAAA,SAAnC,CAAN;AAAA,KAAd;AACH,CAVD;;;ACAAzE,QAAQC,MAAR,CAAe,KAAf,EAAsBmE,OAAtB,CAA8B,aAA9B,EAA6C,UAAUC,KAAV,EAAiB;AAAA;;AAC1D;AACA;AACA;AACA,SAAKtD,eAAL,GAAuB,8BAAvB;;AAEA;AACA;AACA;AACA,SAAK2D,eAAL,GAAuB,IAAvB;AACA;AACA;AACA;AACA,SAAK9C,YAAL,GAAoB,UAACF,IAAD,EAAU;AAC1B,YAAIiD,OAAO,EAAE,QAAQjD,KAAKuB,aAAL,CAAmBvB,IAAnB,CAAV,EAAX;AAAA,YAAiDkD,SAAS,IAA1D;AACA,cAAKC,OAAL,CAAaF,IAAb,CAAkBG,OAAlB,CAA0B,aAAK;AAC3B,gBAAIH,KAAKjD,IAAL,KAAc8B,EAAE9B,IAApB,EAA0B;AACtBkD,yBAAS,KAAT;AACA,uBAAOG,qBAAmBvB,EAAE9B,IAArB,uBAAP;AACH;AACJ,SALD;AAMA,YAAIkD,WAAW,IAAf,EAAqB;AACjBP,kBAAM;AACF7D,qBAAK,WADH;AAEFwE,wBAAQ,MAFN;AAGFL,sBAAMA;AAHJ,aAAN,EAIGvC,IAJH,CAIQ,oBAAY;AAChB,sBAAKsC,eAAL,GAAuBpC,SAASqC,IAAhC;AACAI,sBAAMzC,SAASqC,IAAf;AACH,aAPD;AAQH;AACJ,KAlBD;;AAoBA,SAAKxC,UAAL,GAAkB;AAAA,eAAKkC,MAAMC,GAAN,CAAU,WAAV,EAAuBlC,IAAvB,CAA4B,oBAAY;AAC3D,kBAAKyC,OAAL,GAAevC,QAAf;AACA,mBAAOA,SAASqC,IAAT,CAAcM,IAAd,CAAmB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAChC,oBAAIC,QAAQF,EAAExD,IAAF,CAAOkC,WAAP,EAAZ;AACA,oBAAIyB,QAAQF,EAAEzD,IAAF,CAAOkC,WAAP,EAAZ;AACA,oBAAIwB,QAAQC,KAAZ,EAAmB;AACjB,2BAAO,CAAC,CAAR;AACD;AACD,oBAAID,QAAQC,KAAZ,EAAmB;AACjB,2BAAO,CAAP;AACD;AACD,uBAAO,CAAP;AACH,aAVM,CAAP;AAWH,SAbsB,CAAL;AAAA,KAAlB;;AAeA,SAAK7C,SAAL,GAAiB,UAAClB,EAAD,EAAKK,EAAL,EAAY;AACzB0C,cAAM;AACF7D,iBAAK,eAAec,EADlB;AAEF0D,oBAAQ;AAFN,SAAN,EAGG5C,IAHH,CAGQ,oBAAY;AAChB,kBAAKsC,eAAL,GAAuBpC,SAASqC,IAAhC;AACAI,kBAAMzC,SAASqC,IAAf;AACAhD;AACH,SAPD;AAQH,KATD;AAUH,CA1DD;;;ACAA3B,QAAQC,MAAR,CAAe,KAAf,EAAsBmE,OAAtB,CAA8B,SAA9B,EAAyC,UAAUC,KAAV,EAAiB;AAAA;;AACtD;AACA;AACA;AACA,SAAKrD,WAAL,GAAmB,0BAAnB;;AAEA;AACA;AACA;AACA,SAAK0D,eAAL,GAAuB,IAAvB;AACA;AACA;AACA;AACA,SAAK9C,YAAL,GAAoB,UAACF,IAAD,EAAU;AAC1B,YAAIiD,OAAO,EAAE,QAAQjD,KAAKuB,aAAL,CAAmBvB,IAAnB,CAAV,EAAX;AAAA,YAAiDkD,SAAS,IAA1D;AACA,cAAKC,OAAL,CAAaF,IAAb,CAAkBG,OAAlB,CAA0B,aAAK;AAC3B,gBAAIH,KAAKjD,IAAL,KAAc8B,EAAE9B,IAApB,EAA0B;AACtBkD,yBAAS,KAAT;AACA,uBAAOG,qBAAmBvB,EAAE9B,IAArB,uBAAP;AACH;AACJ,SALD;AAMA,YAAIkD,WAAW,IAAf,EAAqB;AACjBP,kBAAM;AACF7D,qBAAK,WADH;AAEFwE,wBAAQ,MAFN;AAGFL,sBAAMA;AAHJ,aAAN,EAIGvC,IAJH,CAIQ,oBAAY;AAChB,sBAAKsC,eAAL,GAAuBpC,SAASqC,IAAhC;AACAI,sBAAMzC,SAASqC,IAAf;AACH,aAPD;AAQH;AACJ,KAlBD;;AAoBA,SAAKxC,UAAL,GAAkB;AAAA,eAAKkC,MAAMC,GAAN,CAAU,WAAV,EAAuBlC,IAAvB,CAA4B,oBAAY;AAC3D,kBAAKyC,OAAL,GAAevC,QAAf;AACA,mBAAOA,SAASqC,IAAT,CAAcM,IAAd,CAAmB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAChC,oBAAIC,QAAQF,EAAExD,IAAF,CAAOkC,WAAP,EAAZ;AACA,oBAAIyB,QAAQF,EAAEzD,IAAF,CAAOkC,WAAP,EAAZ;AACA,oBAAIwB,QAAQC,KAAZ,EAAmB;AACjB,2BAAO,CAAC,CAAR;AACD;AACD,oBAAID,QAAQC,KAAZ,EAAmB;AACjB,2BAAO,CAAP;AACD;AACD,uBAAO,CAAP;AACH,aAVM,CAAP;AAWH,SAbsB,CAAL;AAAA,KAAlB;;AAeA,SAAK7C,SAAL,GAAiB,UAAClB,EAAD,EAAKK,EAAL,EAAY;AACzB0C,cAAM;AACF7D,iBAAK,eAAec,EADlB;AAEF0D,oBAAQ;AAFN,SAAN,EAGG5C,IAHH,CAGQ,oBAAY;AAChB,kBAAKsC,eAAL,GAAuBpC,SAASqC,IAAhC;AACAI,kBAAMzC,SAASqC,IAAf;AACAhD;AACH,SAPD;AAQH,KATD;AAUH,CA1DD","file":"bundle.js","sourcesContent":["angular.module('app', ['ui.router'])\r\n    .config(($stateProvider, $urlRouterProvider) => {\r\n        $urlRouterProvider.otherwise('/', \"\")\r\n        $stateProvider\r\n        .state('home', {\r\n            templateUrl: '../views/landing.html'\r\n            , url: '/'\r\n        })\r\n        .state('browse', {\r\n            templateUrl: '../views/browse.html'\r\n            , url: '/browse'\r\n        })\r\n        .state('orders', {\r\n            templateUrl: '../views/orderHistory.html'\r\n            , url: '/orders'\r\n        })\r\n        .state('cart', {\r\n            templateUrl: '../views/cart.html'\r\n            , url: '/cart'\r\n        })\r\n        .state('checkout', {\r\n            templateUrl: '../views/checkout.html'\r\n            , url: '/checkout'\r\n        })\r\n        .state('confirmation', {\r\n            templateUrl: '../views/confirmation.html'\r\n            , url: '/confirmation'\r\n        })\r\n        .state('admin', {\r\n            templateUrl: '../views/admin.html'\r\n            , url: '/admin'\r\n            , controller: 'adminCtrl'\r\n        })\r\n    })","angular.module('app').controller('adminCtrl', function ($scope, materialSrv, sizeSrv, $interval) {\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║                TESTS                 ║\r\n    //      ╚══════════════════════════════════════╝\r\n    $scope.adminCtrlTest = 'adminCtrl controller is connected and operational'\r\n    $scope.materialSrvTest = materialSrv.materialSrvTest\r\n    // $scope.sizeSrvTest = \"hello you bastard\"\r\n    $scope.sizeSrvTest = sizeSrv.sizeSrvTest\r\n\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║              VARIABLES               ║\r\n    //      ╚══════════════════════════════════════╝\r\n\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║                Magic                 ║\r\n    //      ╚══════════════════════════════════════╝\r\n    // .....║ Material logic\r\n    $scope.materialInfo = {\r\n        sectionTitle: 'Materials'\r\n        , createTitle: 'Create New Material'\r\n        , formID: 'create-materials-form'\r\n        , inputField: {\r\n            id: \"mat-type\"\r\n            , placeholder: \"Canvas, Parchment, Poster Paper...\"\r\n        }\r\n        , methods: {\r\n            create: (type, cb) => {\r\n                materialSrv.createNewMat(type), cb(type)\r\n            }\r\n            , clearForm: type => {\r\n                document.getElementById($scope.materialInfo.formID).reset()\r\n                document.getElementById($scope.materialInfo.inputField.id).focus()\r\n                $interval(_ => {\r\n                    $scope.materialInfo.methods.getList()\r\n                }, 500, 1)\r\n            }\r\n            , getList: _ => materialSrv.getAllMats().then(response => $scope.materialInfo.listData = response)\r\n            , delete: id => materialSrv.deleteMat(id, $scope.materialInfo.methods.getList)\r\n        }\r\n        , existingTitle: \"Existing Materials\"\r\n        , optionPlaceholder: 'choose material'\r\n    }\r\n    $scope.materialInfo.methods.getList()\r\n\r\n    // .....║ Sizes logic\r\n    $scope.sizesInfo = {\r\n        sectionTitle: 'Sizes'\r\n        , createTitle: 'Create New Size'\r\n        , formID: 'create-size-form'\r\n        , inputField: {\r\n            id: \"size-type\"\r\n            , placeholder: \"12 x 17, 21 x 36\"\r\n        }\r\n        // , methods: {\r\n        //     create: (type, cb) => {\r\n        //         materialSrv.createNewMat(type), cb(type)\r\n        //     }\r\n        //     , clearForm: type => {\r\n        //         document.getElementById($scope.materialInfo.formID).reset()\r\n        //         document.getElementById($scope.materialInfo.inputField.id).focus()\r\n        //         $interval(_ => {\r\n        //             $scope.materialInfo.methods.getList()\r\n        //         }, 500, 1)\r\n        //     }\r\n        //     , getList: _ => materialSrv.getAllMats().then(response => $scope.materialInfo.listData = response)\r\n        //     , delete: id => materialSrv.deleteMat(id, $scope.materialInfo.methods.getList)\r\n        // }\r\n        , existingTitle: \"Existing Sizes\"\r\n        , optionPlaceholder: 'choose size'\r\n    }\r\n    // $scope.materialInfo.methods.getList()\r\n})","angular.module('app').controller('mainCtrl', function ($scope, authService) {\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║                TESTS                 ║\r\n    //      ╚══════════════════════════════════════╝\r\n    $scope.mainCtrlTest = 'mainCtrl controller is connected and operational'\r\n    $scope.authServiceTest = authService.authServiceTest\r\n\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║              VARIABLES               ║\r\n    //      ╚══════════════════════════════════════╝\r\n\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║            HELPER METHODS            ║\r\n    //      ╚══════════════════════════════════════╝\r\n    String.prototype.makeUpperCase = str => {\r\n        let uc = str.toLowerCase().split(' ').map(e => {\r\n            let wordSplit = e.split(''), tuc = wordSplit.splice(0, 1, e.charAt(0).toUpperCase())\r\n            return wordSplit.join('')\r\n        })\r\n        return uc.join(' ')\r\n    }\r\n\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║                Magic                 ║\r\n    //      ╚══════════════════════════════════════╝\r\n    $scope.logout = _ => {\r\n        console.log(`clicked`)\r\n        authService.logout()\r\n    }\r\n\r\n})","angular.module('app').directive('adminCrudDir', function () {\r\n    return {\r\n        scope: {\r\n            dirData: '='\r\n        }\r\n        , templateUrl: '../../views/adminCrud.html'\r\n    }\r\n})","angular.module('app').service('authService', function ($http) {\r\n//      ╔══════════════════════════════════════╗\r\n//      ║                TESTS                 ║\r\n//      ╚══════════════════════════════════════╝\r\n    this.authServiceTest = 'the authService is connected'\r\n\r\n//      ╔══════════════════════════════════════╗\r\n//      ║              END POINTS              ║\r\n//      ╚══════════════════════════════════════╝\r\n    this.logout = () => $http.get('/api/auth/logout').then(response => window.location.href = '/')\r\n})","angular.module('app').service('materialSrv', function ($http) {\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║                TESTS                 ║\r\n    //      ╚══════════════════════════════════════╝\r\n    this.materialSrvTest = 'the materialSrv is connected'\r\n\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║              Variables               ║\r\n    //      ╚══════════════════════════════════════╝\r\n    this.messageResponse = null\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║              END POINTS              ║\r\n    //      ╚══════════════════════════════════════╝\r\n    this.createNewMat = (type) => {\r\n        let data = { \"type\": type.makeUpperCase(type) }, unique = true\r\n        this.matList.data.forEach(e => {\r\n            if (data.type === e.type) {\r\n                unique = false\r\n                return alert(`Material \"${e.type}\" already exists!`)\r\n            }\r\n        })\r\n        if (unique === true) {\r\n            $http({\r\n                url: '/api/mats',\r\n                method: 'POST',\r\n                data: data\r\n            }).then(response => {\r\n                this.messageResponse = response.data\r\n                alert(response.data)\r\n            })\r\n        }\r\n    }\r\n\r\n    this.getAllMats = _ => $http.get('/api/mats').then(response => {\r\n        this.matList = response\r\n        return response.data.sort((a, b) => {\r\n            let typeA = a.type.toUpperCase()\r\n            let typeB = b.type.toUpperCase()\r\n            if (typeA < typeB) {\r\n              return -1;\r\n            }\r\n            if (typeA > typeB) {\r\n              return 1;\r\n            }\r\n            return 0;\r\n        })\r\n    })\r\n\r\n    this.deleteMat = (id, cb) => {\r\n        $http({\r\n            url: '/api/mats/' + id,\r\n            method: 'DELETE'\r\n        }).then(response => {\r\n            this.messageResponse = response.data\r\n            alert(response.data)\r\n            cb()\r\n        })\r\n    }\r\n})","angular.module('app').service('sizeSrv', function ($http) {\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║                TESTS                 ║\r\n    //      ╚══════════════════════════════════════╝\r\n    this.sizeSrvTest = 'the sizeSrv is connected'\r\n\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║              Variables               ║\r\n    //      ╚══════════════════════════════════════╝\r\n    this.messageResponse = null\r\n    //      ╔══════════════════════════════════════╗\r\n    //      ║              END POINTS              ║\r\n    //      ╚══════════════════════════════════════╝\r\n    this.createNewMat = (type) => {\r\n        let data = { \"type\": type.makeUpperCase(type) }, unique = true\r\n        this.matList.data.forEach(e => {\r\n            if (data.type === e.type) {\r\n                unique = false\r\n                return alert(`Material \"${e.type}\" already exists!`)\r\n            }\r\n        })\r\n        if (unique === true) {\r\n            $http({\r\n                url: '/api/mats',\r\n                method: 'POST',\r\n                data: data\r\n            }).then(response => {\r\n                this.messageResponse = response.data\r\n                alert(response.data)\r\n            })\r\n        }\r\n    }\r\n\r\n    this.getAllMats = _ => $http.get('/api/mats').then(response => {\r\n        this.matList = response\r\n        return response.data.sort((a, b) => {\r\n            let typeA = a.type.toUpperCase()\r\n            let typeB = b.type.toUpperCase()\r\n            if (typeA < typeB) {\r\n              return -1;\r\n            }\r\n            if (typeA > typeB) {\r\n              return 1;\r\n            }\r\n            return 0;\r\n        })\r\n    })\r\n\r\n    this.deleteMat = (id, cb) => {\r\n        $http({\r\n            url: '/api/mats/' + id,\r\n            method: 'DELETE'\r\n        }).then(response => {\r\n            this.messageResponse = response.data\r\n            alert(response.data)\r\n            cb()\r\n        })\r\n    }\r\n})"]}